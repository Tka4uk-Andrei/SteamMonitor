using SteamMonitor.JSON_data.Json_cookies_;
using System.Runtime.Serialization.Json;
using System;
using System.Text;
using System.IO;
using System.Net;

namespace SteamMonitor.StaticData
{
    class CookieProvider
    {
        private static readonly string FileName = "cookies.json";

        private static CookieProvider _cookieProvider;
        private CookieContainer _steamCookieContainer;
        private CookieContainer _tf2MartCookieContainer;

        /// <summary>
        ///     Constructor, that setups cookie containers from default json file
        /// </summary>
        /// <exception cref="Exception">
        ///     Throws then parsing fails
        /// </exception>
        private CookieProvider()
        {
            try
            {
                var stream = new StreamReader(FileName);
                UpdateCookies(stream);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception.Message);
                throw exception;
            }
        }

        /// <summary>
        ///     Method that returns instance of <see cref="CookieProvider"/>
        /// </summary>
        /// <returns>
        ///     Instance of <see cref="CookieProvider"/>
        /// </returns>
        public static CookieProvider GetProvider()
        {
            return _cookieProvider ?? (_cookieProvider = new CookieProvider()); ;
        }

        /// <summary>
        ///     Getter for steam cookies
        /// </summary>
        /// <returns>
        ///     <see cref="CookieContainer"/> for requests to steam webpage
        /// </returns>
        public CookieContainer GetSteamContainer()
        {
            return _steamCookieContainer;
        }

        /// <summary>
        ///     Getter for steam cookies
        /// </summary>
        /// <returns>
        ///     <see cref="CookieContainer"/> for requests to steam webpage
        /// </returns>
        public CookieContainer GetTf2MartContainer()
        {
            return _tf2MartCookieContainer;
        }

        /// <summary>
        ///     Method that setups and saves to file all (steam, tf2Mart) cookie containers
        /// </summary>
        /// <param name="stream">
        ///     <see cref="StreamReader"> that contains raw and valid json 
        /// </param>
        /// <exception cref="Exception">
        ///     Throws then parsing fails
        /// </exception>
        public void setAndSaveCookies(StreamReader stream)
        {
            var stringStream = stream.ReadToEnd().Clone().ToString();

            UpdateCookies(stringStream);
            SaveCookies(stringStream);
        }

        /// <summary>
        ///     Method updates all (steam, tf2Mart) cookie containers
        /// </summary>
        /// <param name="stringStream">
        ///     <see cref="string"> that contains raw and valid json 
        /// </param>
        /// <exception cref="Exception">
        ///     Throws then parsing fails
        /// </exception>
        public void UpdateCookies(string stringStream)
        {
            // init values section
            _steamCookieContainer = new CookieContainer();
            _tf2MartCookieContainer = new CookieContainer();
            var cookieDataContainer = new CookiesDataContainer();

            // read and parse data from stream
            try
            {
                using (var ms = new MemoryStream(Encoding.UTF8.GetBytes(stringStream)))
                {
                    var ser = new DataContractJsonSerializer(cookieDataContainer.GetType(),
                    new DataContractJsonSerializerSettings
                    {
                        UseSimpleDictionaryFormat = true
                    });
                    cookieDataContainer = ser.ReadObject(ms) as CookiesDataContainer;
                }

            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw exception;
            }

            // write parsed data from stream to steam cookie container
            for (var i = 0; i < cookieDataContainer.SteamCookieDatas.Length; ++i)
            {
                var c = cookieDataContainer.SteamCookieDatas[i];
                Cookie cookie;

                try
                {
                    cookie = new Cookie(c.Name, c.Value, c.Path, c.Domain);
                    _steamCookieContainer.Add(cookie);
                }
                // if cookie couldn't be generated by 
                catch (Exception exception)
                {
                    //TODO: view notification about cookie generation fail
                    Console.WriteLine(exception.Message);
                }
            }

            // write parsed data from stream to tf2Mart cookie container
            for (var i = 0; i < cookieDataContainer.Tf2MartCookieDatas.Length; ++i)
            {
                var c = cookieDataContainer.Tf2MartCookieDatas[i];
                Cookie cookie;
                try
                {
                    cookie = new Cookie(c.Name, c.Value, c.Path, c.Domain);
                }
                // if cookie couldn't be generated by 
                catch (CookieException cookieException)
                {
                    //TODO: view notification about cookie generation fail
                    Console.WriteLine(cookieException.Message);
                    cookie = null;
                }

                if (cookie != null)
                {
                    _tf2MartCookieContainer.Add(cookie);
                }
            }
        }

        /// <summary>
        ///     Method updates all (steam, tf2Mart) cookie containers
        /// </summary>
        /// <param name="stream">
        ///     <see cref="StreamReader"> that contains raw and valid json 
        /// </param>
        /// <exception cref="Exception">
        ///     Throws then parsing fails
        /// </exception>
        public void UpdateCookies(StreamReader stream)
        {
            var stringStream = stream.ReadToEnd().Clone().ToString();
            UpdateCookies(stringStream);
        }

        /// <summary>
        ///     Method saves cookies to file
        /// </summary>
        /// <param name="stringStream">
        ///     <see cref="string"> that contains raw and valid json 
        /// </param>
        /// <exception cref="Exception">
        ///     Throws then writing fails
        /// </exception>
        public void SaveCookies(string stringStream)
        {
            try
            {
                var file = new FileStream(FileName, FileMode.Create);
                var bytes = Encoding.UTF8.GetBytes(stringStream);
                file.Write(bytes, 0, bytes.Length);
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
                throw exception;
            }
        }
    }
}
